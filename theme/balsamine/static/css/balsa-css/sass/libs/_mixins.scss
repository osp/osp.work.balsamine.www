// -------------------------------------------------------
// Media queries
// -------------------------------------------------------


// Reference widths from settings file
@mixin respond-to($media-min, $IE9: true) {
    @if $IE9 == true {
        .lt-ie9 & {
            @content;
        }
        @media screen and (min-width: $media-min)  {
            @content;
        }
    }
    @else {
        @media screen and (min-width: $media-min) {
            @content;
        }
    }
}

@mixin respond-to-max($media-max, $IE9: true) {
    @if $IE9 == true {
        .lt-ie9 & {
            @content;
        }
        @media screen and (max-width: $media-max - 1px)  {
            @content;
        }
    }
    @else {
        @media screen and (max-width: $media-max - 1px) {
            @content;
        }
    }
}


@mixin respond-to-min-max($media-min, $media-max, $IE9: true) {
    @if $IE9 == true {
        .lt-ie9 & {
            @content;
        }
        @media screen and (min-width: $media-min) and (max-width: $media-max)  {
            @content;
        }
    }
    @else {
         @media screen and (min-width: $media-min) and (max-width: $media-max) {
            @content;
        }
    }
}


// -------------------------------------------------------
// Grid
// -------------------------------------------------------

// Generate columns names span-#
// Called by: @include grid_columns(#) where # is the amount of columns needed
// Perfect for use in breakpoints to use different columns

@mixin grid_columns($columns){
	@for $i from 1 through $columns{
		.colspan#{$columns}-#{$i}{
			width: ((100% / $columns)*$i);
		}
	}
	@for $i from 1 through $columns{
		.push#{$columns}-#{$i}{
			margin-left: ((100% / $columns)*$i);
		}
	}
	@for $i from 1 through $columns{
		.pull#{$columns}-#{$i}{
			margin-right: ((100% / $columns)*$i);
		}
	}
	.push-disable#{$columns}{
		margin-left: 0;
	}
	.pull-disable#{$columns}{
		margin-right: 0;
	}
	.hide-at#{$columns} {
		display: none;
	}
	.block-show-at#{$columns} {
		display: block;
	}
	.inline-show-at#{$columns} {
		display: inline;
		display: inline-block;
	}

}

@mixin grid {
	// Widths
	*[class*="colspan"] {
		width: 100%;
		display: block;
	}
	// Floats
	*[class*="as-grid"] {
		float: left;
		display: inline;
		display: inline-block;
	}
	// Gutters
	*[class*="with-gutter"] {
		@include respond-to($start-columns) {
			padding-left: $internal-spacing-percent;
		}
	}
}
